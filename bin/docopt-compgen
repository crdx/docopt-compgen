#!/usr/bin/env ruby
trap(:SIGINT) { puts; exit 130 }
Signal.trap(:SIGPIPE, :SYSTEM_DEFAULT)
require 'docopt'
PROGRAM_NAME = File.basename($PROGRAM_NAME)

usage = <<~EOF
    Usage:
        #{PROGRAM_NAME} [options] [<command>]

    Options:
        -o, --out PATH         Output completion to PATH instead of stdout
        --complete-short       Complete short options (long options are always completed)
        --command-name NAME    Command name
                               If not specified then the slugified basename of <command> will be used
        --namespace NAME       Prefix for generated bash functions [default: cmd]
        -v, --version          Show version
        -h, --help             Show help
EOF

begin
    opts = Docopt.docopt(usage)
rescue Docopt::Exit
    puts usage
    exit 2
end

require_relative '../lib/docopt_compgen'

if opts['--version']
    puts DocoptCompgen::VERSION
    exit
end

require 'colorize'

def extract_command_name(usage)
    matches = /Usage:\s*(\S+)/.match(usage)
    matches[1] if matches
end

if $stdin.tty?
    command = opts['<command>']
    if command.nil?
        $stderr.puts 'Error: <command> is mandatory when not passing help via stdin'.red
        puts usage
        exit 1
    end

    begin
        usage = `#{command} --help`
    rescue => e
        $stderr.puts e.to_s.red
        exit 1
    end

    command_name = opts['--command-name']
else
    usage = $stdin.read
    command_name = extract_command_name(usage)

    if command_name.nil?
        $stderr.puts 'Error: Unable to parse command name from usage output'.red
        exit 1
    end
end

if usage.nil? || usage.lines.first !~ /Usage:/
    $stderr.puts 'Unable to parse usage output from "%s"'.red % command
    exit 1
end

parser = DocoptCompgen::Parser.new(usage, complete_short: opts['--complete-short'])
generator = DocoptCompgen::Generator.new(
    command,
    parser.to_node,
    command_name: command_name,
    namespace: opts['--namespace'],
)

output = generator.to_s

if opts['--out']
    File.write(opts['--out'], output)
else
    puts output
end
